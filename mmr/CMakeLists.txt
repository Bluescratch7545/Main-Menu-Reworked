cmake_minimum_required(VERSION 3.21)
set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

if("${CMAKE_SYSTEM_NAME}" STREQUAL "iOS" OR IOS)
    set(CMAKE_OSX_ARCHITECTURES "arm64")
else()
    set(CMAKE_OSX_ARCHITECTURES "arm64;x86_64")
endif()

set(CMAKE_CXX_VISIBILITY_PRESET hidden)

project(MainMenuReworked VERSION 1.0.0)

# Add all source files inside src (recursively)
file(GLOB_RECURSE SOURCES CONFIGURE_DEPENDS src/*.cpp)

# Set up the mod binary
add_library(${PROJECT_NAME} SHARED ${SOURCES})

# Force C++20 features for this target (important for Android builds)
target_compile_features(${PROJECT_NAME} PUBLIC cxx_std_20)

if(NOT DEFINED ENV{GEODE_SDK})
    message(FATAL_ERROR "Unable to find Geode SDK! Please define GEODE_SDK environment variable to point to Geode")
else()
    message(STATUS "Found Geode: $ENV{GEODE_SDK}")
endif()

# Generate Geode bindings
# add_custom_command(
    # OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/bindings/GeneratedSource.cpp
    # COMMAND geode-codegen ${CMAKE_CURRENT_SOURCE_DIR}/src -o ${CMAKE_CURRENT_BINARY_DIR}/bindings
    # DEPENDS ${SOURCES}
    # COMMENT "Generating Geode bindings..."
# )

# Add generated source to existing target
add_custom_target(GenerateBindings ALL
    DEPENDS ${CMAKE_CURRENT_BINARY_DIR}/bindings/GeneratedSource.cpp
)
add_dependencies(${PROJECT_NAME} GenerateBindings)
file(WRITE ${CMAKE_CURRENT_BINARY_DIR}/bindings/GeneratedSource.cpp "// Generated by CLI; do not edit")

if(ANDROID)
    set(CMAKE_ANDROID_STL_TYPE c++_shared)
    target_compile_options(${PROJECT_NAME} PRIVATE -Wno-pch-instantiate-templates)
endif()

# Add Geode SDK
add_subdirectory($ENV{GEODE_SDK} ${CMAKE_CURRENT_BINARY_DIR}/geode)

# Set up dependencies, resources, and link Geode
setup_geode_mod(${PROJECT_NAME})
